{"ast":null,"code":"import _slicedToArray from \"/Users/alexb/Desktop/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexb/Desktop/contact-keeper/client/src/context/auth/AuthState.js\";\nimport React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    user: null,\n    loading: true,\n    error: null\n  };\n\n  const _useReducer = useReducer(authReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //Load User\n  //Registe User\n\n\n  const registe = async formData => {\n    const config = {\n      headers: {\n        'Contet-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/users');\n    } catch (err) {}\n  }; //Login User\n  // Logout\n  // Clear Errors\n\n\n  return React.createElement(authContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      error: state.error,\n      user: state.user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/Users/alexb/Desktop/contact-keeper/client/src/context/auth/AuthState.js"],"names":["React","useReducer","authContext","authReducer","axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","user","loading","error","state","dispatch","registe","formData","config","headers","res","post","err","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,YARF,QASO,UATP;;AAWA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADY;AAEnBC,IAAAA,eAAe,EAAE,IAFE;AAGnBC,IAAAA,IAAI,EAAE,IAHa;AAInBC,IAAAA,OAAO,EAAE,IAJU;AAKnBC,IAAAA,KAAK,EAAE;AALY,GAArB;;AADyB,sBASCrB,UAAU,CAACE,WAAD,EAAcY,YAAd,CATX;AAAA;AAAA,QASlBQ,KATkB;AAAA,QASXC,QATW,oBAWzB;AAEA;;;AACA,QAAMC,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAChC,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,uBAAe;AADR;AADI,KAAf;;AAKA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAN,CAAW,YAAX,CAAlB;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY,CAAE;AACjB,GATD,CAdyB,CAyBzB;AAEA;AAEA;;;AAEA,SACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,KAAK,EAAEO,KAAK,CAACP,KADR;AAELG,MAAAA,eAAe,EAAEI,KAAK,CAACJ,eAFlB;AAGLE,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAHV;AAILC,MAAAA,KAAK,EAAEC,KAAK,CAACD,KAJR;AAKLF,MAAAA,IAAI,EAAEG,KAAK,CAACH;AALP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGN,KAAK,CAACkB,QATT,CADF;AAaD,CA5CD;;AA8CA,eAAenB,SAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport axios from 'axios';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS\n} from '../types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    user: null,\n    loading: true,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  //Load User\n\n  //Registe User\n  const registe = async formData => {\n    const config = {\n      headers: {\n        'Contet-Type': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.post('/api/users');\n    } catch (err) {}\n  };\n\n  //Login User\n\n  // Logout\n\n  // Clear Errors\n\n  return (\n    <authContext.Provider\n      value={{\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n        loading: state.loading,\n        error: state.error,\n        user: state.user\n      }}\n    >\n      {props.children}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}