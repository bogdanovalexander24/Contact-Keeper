{"ast":null,"code":"import _defineProperty from \"/Users/alexb/Desktop/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_ALERT, CLEAR_ALERT, REMOVE_ALERT } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case SET_ALERT:\n      return [...state, action.payload];\n\n    case CLEAR_ALERT:\n      return _objectSpread({}, state, {\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      });\n\n    case REMOVE_ALERT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/alexb/Desktop/contact-keeper/client/src/context/alert/alertReducer.js"],"names":["SET_ALERT","CLEAR_ALERT","REMOVE_ALERT","state","action","type","payload","contacts","filter","contact","id","current"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,YAAjC,QAAqD,UAArD;AAEA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,SAAL;AACE,aAAO,CAAC,GAAGG,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AAEF,SAAKL,WAAL;AACE,+BACKE,KADL;AAEEI,QAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeC,MAAf,CACRC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OADzB;AAFZ;;AAMF,SAAKJ,YAAL;AACE,+BACKC,KADL;AAEEQ,QAAAA,OAAO,EAAEP,MAAM,CAACE;AAFlB;;AAKF;AACE,aAAOH,KAAP;AAlBJ;AAoBD,CArBD","sourcesContent":["import { SET_ALERT, CLEAR_ALERT, REMOVE_ALERT } from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_ALERT:\n      return [...state, action.payload];\n\n    case CLEAR_ALERT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact.id !== action.payload\n        )\n      };\n    case REMOVE_ALERT:\n      return {\n        ...state,\n        current: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}