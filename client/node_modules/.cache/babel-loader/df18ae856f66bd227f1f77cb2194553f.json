{"ast":null,"code":"import _slicedToArray from \"/Users/alexb/Desktop/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/alexb/Desktop/contact-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport axios from 'axios';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CLEAR_CONTACTS, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null,\n    loading: true\n  };\n\n  const _useReducer = useReducer(contactReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //Get contacts\n\n\n  const getContacts = async () => {\n    const config = {\n      headers: {\n        'x-auth-token': localStorage.token\n      }\n    };\n\n    try {\n      const res = await axios.get('/api/contacts/', config);\n      console.log(res.data);\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; //Add contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Contet-Type': 'application/json',\n        'x-auth-token': localStorage.token\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; //Delete Contact\n\n\n  const deleteContact = async id => {\n    try {\n      const res = await axios.delete(\"http://localhost:5000/api/contacts/\".concat(id));\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; //Set current contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //Clear Current contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Update contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; //Filer contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  }; //Clear contacts\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  };\n\n  return React.createElement(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      loading: state.loading,\n      setCurrent,\n      addContact,\n      deleteContact,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/alexb/Desktop/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","contactContext","contactReducer","axios","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CLEAR_CONTACTS","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","loading","state","dispatch","getContacts","config","headers","localStorage","token","res","get","console","log","data","type","payload","err","response","msg","addContact","contact","post","deleteContact","id","delete","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","clearContacts","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport axios from 'axios';\n\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  CLEAR_CONTACTS,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR\n} from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null,\n    loading: true\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  //Get contacts\n  const getContacts = async () => {\n    const config = {\n      headers: {\n        'x-auth-token': localStorage.token\n      }\n    };\n    try {\n      const res = await axios.get('/api/contacts/', config);\n      console.log(res.data);\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  //Add contact\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Contet-Type': 'application/json',\n        'x-auth-token': localStorage.token\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  //Delete Contact\n  const deleteContact = async id => {\n    try {\n      const res = await axios.delete(\n        `http://localhost:5000/api/contacts/${id}`\n      );\n\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  //Set current contact\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  };\n  //Clear Current contact\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  };\n\n  //Update contact\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  };\n\n  //Filer contacts\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  };\n\n  //Clear filter\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  //Clear contacts\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  };\n\n  return (\n    <contactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        loading: state.loading,\n        setCurrent,\n        addContact,\n        deleteContact,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        getContacts,\n        clearContacts\n      }}\n    >\n      {props.children}\n    </contactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}